@using Rugal.MVC.VcLibrary.Model;
@using Rugal.MVC.UILibraryCore.Model;
@model LibraryLayoutModel
@inject VcLibrarySetting Setting
@{
    ViewData["Title"] = "VcController";
    Layout = $"~/{Model.LayoutPath}";
}

<style>
    #sidebar-wrapper {
        height: 85vh;
        padding-left: 20px;
        overflow-y: auto;
        overflow-x: hidden;
    }
</style>

<div id="AppContent" class="row" style="height:88vh;">
    <div class="row align-self-center">
        <div class="col-3" id="sidebar-wrapper">
            <div class="list-group list-group-flush scrollarea border-bottom">
                <div v-for="(Item, Idx) in Components">
                    <button class="btn btn-primary list-group-item w-100 text-start"
                            v-bind:class="{ 'bg-black text-white' : CheckActive(Item) }"
                            v-text="Item"
                            v-on:click="ComponentSelect(Item)"></button>
                </div>
            </div>
        </div>
        <div class="col-9 container">
            <div class="row">
                <div class="col">
                    <button class="btn btn-secondary" v-on:click="EditorAreaMore()">
                        {{ IsMore ? 'Less' : 'More' }}
                    </button>

                    <button class="ms-1 btn btn-success" v-on:click="EditorAreaShow()">
                        {{ IsShow ? 'Hide' : 'Show' }}
                    </button>

                    <button class="ms-1 btn btn-info" v-on:click="UpdateRenderComponent()">
                        Refresh
                    </button>
                </div>
                <div class="col text-end">
                    <button class="btn btn-primary" v-on:click="SaveEditor()">
                        Save
                    </button>
                </div>
            </div>
            <textarea v-model="RenderHtml"
                      class="mt-1 form-control bg-black text-white"
                      v-bind:class="{ 'h-50' : IsMore, 'h-25' : !IsMore , 'd-none' : !IsShow }"></textarea>
            <hr />
            <div id="RenderView" v-html="RenderHtml" class="h-100">
            </div>
        </div>
    </div>

</div>

<script src="~/js/site.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<script>
    const { createApp } = Vue;
    const Result = {
        RenderHtml: '',
        Components: [],
        IsMore: false,
        IsShow: true,
    };

    let VueOption = {
        data() {
            return Result;
        },
        methods: {
            CheckActive: (Item) => {
                let GetUrl = window.location.href.split('#')[1];
                if (GetUrl == undefined)
                    return false;
                return GetUrl.toLocaleLowerCase() == Item.toLocaleLowerCase();
            },
            ComponentSelect(Item) {
                let GetBaseUrl = window.location.href.split('#')[0];
                window.location.href = `${GetBaseUrl}#${Item}`;
                VueOption.methods.UpdateRenderComponent();
            },
            UpdateRenderComponent() {
                let Href = window.location.href;
                if (Href.includes('#')) {
                    let ComponentName = Href.split('#')[1]
                    fetch(`GetComponent?ComponentName=${ComponentName}`)
                        .then(async (Api) => {
                            let GetHtml = await Api.text();
                            Result.RenderHtml = GetHtml;
                            VueProxy.$forceUpdate();
                        });
                }
            },
            EditorAreaMore() {
                Result.IsMore = !Result.IsMore;
                VueProxy.$forceUpdate();
            },
            EditorAreaShow() {
                Result.IsShow = !Result.IsShow;
                VueProxy.$forceUpdate();
            },
            SaveEditor() {
                let Href = window.location.href;
                if (Href.includes('#')) {
                    let ComponentName = Href.split('#')[1];
                    let Param = {
                        Html: Result.RenderHtml,
                        ComponentName,
                    };

                    fetch(`SaveComponentView`, {
                        method: 'POST',
                        body: JSON.stringify(Param),
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    }).then(() => {
                        alert('Saved');
                    });
                }
            },

        },
    };
    const VueProxy = createApp(VueOption).mount('#AppContent');
    VueOption.methods.UpdateRenderComponent();

    fetch(`GetAllComponents`)
        .then(async (ApiRet) => {
            let AllComponent = await ApiRet.json();
            Result.Components = AllComponent;
            VueOption.methods.ComponentSelect(AllComponent[0]);
            VueProxy.$forceUpdate();
        })
        ;

</script>
